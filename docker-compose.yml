version: "3.8"

services:
  # --- Core Infrastructure ---
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181", "|", "grep", "imok"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
      - "7071:7071"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      NUM_PARTITIONS: 3
      DEFAULT_REPLICATION_FACTOR: 1

      # ðŸ‘‡ Bind listeners INSIDE the container
      KAFKA_LISTENERS: "PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092"

      # ðŸ‘‡ What addresses clients should use (inside docker vs. on your host)
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092"

      # ðŸ‘‡ Map listener names to protocols and choose inter-broker listener
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

      # JMX exporter
      KAFKA_OPTS: -javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent.jar=7071:/etc/jmx-kafka.yml
    volumes:
      - ./jmx-exporter/jmx_prometheus_javaagent-0.20.0.jar:/usr/share/jmx_exporter/jmx_prometheus_javaagent.jar:ro
      - ./kafka/jmx-kafka.yml:/etc/jmx-kafka.yml:ro
    healthcheck:
      # simplest: TCP open on 9092
      test: ["CMD-SHELL", "bash -lc 'echo >/dev/tcp/127.0.0.1/9092'"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 60s

  # kafka-init:
  #   image: confluentinc/cp-kafka:7.3.2
  #   depends_on:
  #     kafka:
  #       condition: service_healthy
  #   restart: "no"
  #   entrypoint: ["/bin/bash","-lc"]
  #   command: >
  #     "kafka-topics --bootstrap-server kafka:9092
  #     --create --topic raw-events --partitions 1 --replication-factor 1 || true"



  cassandra:
    image: cassandra:4.0
    container_name: cassandra
    ports:
      - "9042:9042"
      - "7072:7072"   # JMX exporter port
    environment:
      CASSANDRA_DC: datacenter1
      JVM_OPTS: "-javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent.jar=7072:/etc/jmx-cassandra.yml"
    volumes:
      - cassandra_data:/var/lib/cassandra
      - ./jmx-exporter/jmx_prometheus_javaagent-0.20.0.jar:/usr/share/jmx_exporter/jmx_prometheus_javaagent.jar
      - ./cassandra/jmx-cassandra.yml:/etc/jmx-cassandra.yml
    healthcheck:
      # cqlsh returns immediately only when the node is up *and* CQL is ready
      test: ["CMD", "cqlsh", "-e", "SELECT release_version FROM system.local"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 120s   # Cassandra can take a while on cold start
    

  # --- Application Services ---
  anomaly-service:
    build: ./anomaly-service
    container_name: anomaly-service
    ports: ["8000:8000"]
    environment:
      - OTEL_SERVICE_NAME=anomaly-service
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8000/healthz"]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 10s

  producer:
    build: ./producer
    container_name: producer
    depends_on: [kafka]
    environment:
      - KAFKA_BOOTSTRAP=kafka:9092
      - TOPIC=raw-events
      - RATE_PER_SEC=10 # Start with a lower rate for testing
      - OTEL_SERVICE_NAME=event-producer
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317

    # --- Flink Cluster ---
  jobmanager:
    image: flink:1.17.1-scala_2.12
    container_name: jobmanager
    command: jobmanager
    ports:
      - "8081:8081"
      - "9250:9250"
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        jobmanager.memory.process.size: 1600m
        taskmanager.numberOfTaskSlots: 2
        metrics.reporter.prom.factory.class: org.apache.flink.metrics.prometheus.PrometheusReporterFactory
        metrics.reporter.prom.port: 9250
        blob.server.port: 6124
        query.server.port: 6125
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8081/overview"]
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 10s

  taskmanager:
    image: flink:1.17.1-scala_2.12
    container_name: taskmanager
    command: taskmanager
    depends_on: [jobmanager]
    ports:
      - "9251:9250"   # expose Prometheus port
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.memory.process.size: 2048m
        taskmanager.numberOfTaskSlots: 2
        metrics.reporter.prom.factory.class: org.apache.flink.metrics.prometheus.PrometheusReporterFactory
        metrics.reporter.prom.port: 9250

  flink-job:
    build: ./flink-job
    container_name: flink-job
    depends_on:
      kafka:
        condition: service_healthy
      cassandra:
        condition: service_healthy
      anomaly-service:
        condition: service_healthy
      jobmanager:
        condition: service_healthy
      taskmanager:
        condition: service_started 
    environment:
      - ANOMALY_URL=http://anomaly-service:8000/score
      - ASYNC_TIMEOUT_SECS=6
      - ASYNC_CAPACITY=200
      - ANOMALY_MAX_RETRIES=2
      - ANOMALY_BASE_BACKOFF_MS=200
      - ANOMALY_CALL_TIMEOUT_MS=2000
    command: ["/app/entrypoint.sh"]


  # --- Observability Stack ---
  otel-collector:
    image: otel/opentelemetry-collector:0.104.0
    command: ["--config=/etc/otelcol/config.yaml"]
    volumes:
      - ./otel/otel-collector-config.yaml:/etc/otelcol/config.yaml:ro
    ports:
      - "4317:4317" # OTLP gRPC

  jaeger:
    image: jaegertracing/all-in-one:1.57
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686" # Jaeger UI

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports: ["9090:9090"]

  grafana:
    image: grafana/grafana:latest
    depends_on: [prometheus]
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    ports: ["3000:3000"]
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin   # change me
      # optional: allow anonymous browsing of dashboards
      - GF_AUTH_ANONYMOUS_ENABLED=true

volumes:
  cassandra_data:
  grafana_data:
